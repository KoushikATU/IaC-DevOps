# This CloudFormation template is for Assignment 1

AWSTemplateFormatVersion: 2010-09-09
# ============= Parameters =============
Parameters:
  DBUsername:
    Description: "DB Username:"
    Type: String
    AllowedPattern : ".+"
  DBPassword:
    Description: "DB Password:"
    Type: String
    AllowedPattern : ".+"
# ============= Resources =============
Resources:
  CFVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.30.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Join ['', [!Ref "AWS::StackName", "-VPC" ]]
# ----------- Gateways -----------
  CFInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join ['', [!Ref "AWS::StackName", "-InternetGateway" ]]

  CFVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref CFInternetGateway
      VpcId: !Ref CFVPC

# ----------- Subnets -----------
  CFPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref CFVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 172.30.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join ['', [!Ref "AWS::StackName", "-PublicSubnet1" ]]

  CFPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref CFVPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: 172.30.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join ['', [!Ref "AWS::StackName", "-PublicSubnet2" ]]

  CFPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref CFVPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: 172.30.3.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join ['', [!Ref "AWS::StackName", "-PrivateSubnet1" ]]

  CFPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref CFVPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: 172.30.4.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join ['', [!Ref "AWS::StackName", "-PrivateSubnet2" ]]

# ----------- NAT -----------

  CFNatEIP:
    Type: AWS::EC2::EIP
    DependsOn: CFVPCGatewayAttachment
    Properties:
      Domain: CFVPC

  CFNatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt CFNatEIP.AllocationId
      SubnetId: !Ref CFPublicSubnet1
      Tags:
        - Key: Name
          Value: !Join ['', [!Ref "AWS::StackName", "-NatGateway" ]]

# ----------- Routes -----------

  CFRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref CFVPC
      Tags:
        - Key: Name
          Value: !Join ['', [!Ref "AWS::StackName", "-RouteTable1" ]]

  CFRoute1:
    Type: AWS::EC2::Route
    DependsOn: CFVPCGatewayAttachment
    Properties:
      RouteTableId: !Ref CFRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref CFInternetGateway

  CFSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref CFRouteTable1
      SubnetId: !Ref CFPublicSubnet1

  CFSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref CFRouteTable1
      SubnetId: !Ref CFPublicSubnet2

  CFRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref CFVPC
      Tags:
        - Key: Name
          Value: !Join ['', [!Ref "AWS::StackName", "-RouteTable2" ]]

  CFRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref CFRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref CFNatGateway

  CFSubnetRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref CFRouteTable2
      SubnetId: !Ref CFPrivateSubnet1

  CFRouteTable3:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref CFVPC
      Tags:
        - Key: Name
          Value: !Join ['', [!Ref "AWS::StackName", "-RouteTable3" ]]

  CFSubnetRouteTableAssociation4:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref CFRouteTable3
      SubnetId: !Ref CFPrivateSubnet2

# ----------- Security Groups -----------

  DenyInboundSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "deny-inbound"
      GroupDescription: "Deny all inbound traffic"
      VpcId: !Ref CFVPC

  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "allow-web"
      GroupDescription: Enable web access externally
      VpcId: !Ref CFVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Join ['', [!Ref "AWS::StackName", "-WebSecurityGroup" ]]

  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: Allow-SSH
      GroupDescription: Enable SSH access
      VpcId: !Ref CFVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 172.30.0.0/16
      Tags:
        - Key: Name
          Value: !Join ['', [!Ref "AWS::StackName", "-SSHSecurityGroup" ]]

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: Allow-DB
      GroupDescription: Enable DB access
      VpcId: !Ref CFVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 172.30.0.0/16
      Tags:
        - Key: Name
          Value: !Join ['', [!Ref "AWS::StackName", "-DBSecurityGroup" ]]

# ----------- EC2 (Web Server) -----------

  CFEC2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-08c40ec9ead489470
      InstanceType: t2.micro
      SubnetId: !Ref CFPublicSubnet1
      SecurityGroupIds:
        - !GetAtt "WebSecurityGroup.GroupId"
        - !GetAtt "SSHSecurityGroup.GroupId"
      Tags:
        - Key: Name
          Value: !Join ['', [!Ref "AWS::StackName", "-EC2" ]]

# ----------- Database -----------

  CFDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: "DatabaseSubnetGroup"
      DBSubnetGroupDescription: "Subnet Group for Database"
      SubnetIds:
        - !Ref CFPublicSubnet1
        - !Ref CFPublicSubnet2
        - !Ref CFPrivateSubnet1
        - !Ref CFPrivateSubnet2
      Tags:
        - Key: Name
          Value: !Join ['', [!Ref "AWS::StackName", "-DBSubnetGroup" ]]

  CFDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBSubnetGroupName: !Ref CFDBSubnetGroup
      VPCSecurityGroups:
        - !GetAtt "DBSecurityGroup.GroupId"
        - !GetAtt "SSHSecurityGroup.GroupId"
      DBInstanceClass: db.t2.micro
      AllocatedStorage: "5"
      Engine: postgres
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      Tags:
        - Key: Name
          Value: my-database
