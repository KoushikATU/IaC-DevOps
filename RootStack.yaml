# This CloudFormation template is for Assignment 1
AWSTemplateFormatVersion: 2010-09-09
Description: This template is the root stack for the project which creates all the necessary networks and calls all the nexessary nested stacks.
# ============= Parameters =============
Parameters:
  VPCCIDR:
    Type: String
    Default: "172.30.0.0/16"
  PublicSubnet1CIDR:
    Type: String
    Default: "172.30.1.0/24"
  PublicSubnet2CIDR:
    Type: String
    Default: "172.30.2.0/24"
  PrivateSubnet1CIDR:
    Type: String
    Default: "172.30.3.0/24"
  PrivateSubnet2CIDR:
    Type: String
    Default: "172.30.4.0/24"
  DBUsername:
    Description: "DB Username:"
    Type: String
    AllowedPattern : ".+"
  DBPassword:
    Description: "DB Password:"
    Type: String
    NoEcho : true
    AllowedPattern : ".+"
  SSHKey:
    Description: "SSH Key Name:"
    Type: String
    AllowedPattern : ".+"

# ============= Resources =============
Resources:
  CFVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Join ['', [!Ref "AWS::StackName", "-VPC" ]]
# ----------- Gateways -----------
  CFInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join ['', [!Ref "AWS::StackName", "-InternetGateway" ]]

  CFVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref CFInternetGateway
      VpcId: !Ref CFVPC

# ----------- Subnets -----------
  CFPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref CFVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join ['', [!Ref "AWS::StackName", "-PublicSubnet1" ]]

  CFPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref CFVPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join ['', [!Ref "AWS::StackName", "-PublicSubnet2" ]]

  CFPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref CFVPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join ['', [!Ref "AWS::StackName", "-PrivateSubnet1" ]]

  CFPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref CFVPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join ['', [!Ref "AWS::StackName", "-PrivateSubnet2" ]]

# ----------- NAT -----------

  CFNatEIP:
    Type: AWS::EC2::EIP
    DependsOn: CFVPCGatewayAttachment
    Properties:
      Domain: vpc

  CFNatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt CFNatEIP.AllocationId
      SubnetId: !Ref CFPublicSubnet1
      Tags:
        - Key: Name
          Value: !Join ['', [!Ref "AWS::StackName", "-NatGateway" ]]

# ----------- Routes -----------

  CFRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref CFVPC
      Tags:
        - Key: Name
          Value: !Join ['', [!Ref "AWS::StackName", "-RouteTable1" ]]

  CFRoute1:
    Type: AWS::EC2::Route
    DependsOn: CFVPCGatewayAttachment
    Properties:
      RouteTableId: !Ref CFRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref CFInternetGateway

  CFSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref CFRouteTable1
      SubnetId: !Ref CFPublicSubnet1

  CFSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref CFRouteTable1
      SubnetId: !Ref CFPublicSubnet2

  CFRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref CFVPC
      Tags:
        - Key: Name
          Value: !Join ['', [!Ref "AWS::StackName", "-RouteTable2" ]]

  CFRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref CFRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref CFNatGateway


  CFSubnetRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref CFRouteTable2
      SubnetId: !Ref CFPrivateSubnet1

  CFSubnetRouteTableAssociation4:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref CFRouteTable2
      SubnetId: !Ref CFPrivateSubnet2

# ----------- Security Groups -----------

  CFSecurityGroupNestedStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://l00163331.s3.amazonaws.com/SecurityGroupStack.yaml
      Parameters:
        VPCID: !Ref CFVPC

# ----------- EC2 (Web Server) -----------

  CFEC2NestedStack:
    Type: AWS::CloudFormation::Stack
    # DependsOn is obsolete in this case because it is already enforced by a "Fn:GetAtt" but just keeping it here for my understanding that this code does not run until the previous nested stack is run successfully
    ## DependsOn: CFSecurityGroupNestedStack
    Properties:
      TemplateURL: https://l00163331.s3.amazonaws.com/EC2Stack.yaml
      Parameters:
        SSHKey: !Ref SSHKey
        CFPublicSubnet1ID: !Ref CFPublicSubnet1
        WebSecurityGroupID: !GetAtt CFSecurityGroupNestedStack.Outputs.WebSecurityGroupID
        SSHSecurityGroupID: !GetAtt CFSecurityGroupNestedStack.Outputs.SSHSecurityGroupID

# ----------- Database -----------

  CFDBNestedStack:
    Type: AWS::CloudFormation::Stack
    # DependsOn is obsolete in this case because it is already enforced by a "Fn:GetAtt" but just keeping it here for my understanding that this code does not run until the previous nested stack is run successfully
    ## DependsOn: CFSecurityGroupNestedStack
    Properties:
      TemplateURL: https://l00163331.s3.amazonaws.com/DBStack.yaml
      Parameters:
        DBUsername: !Ref DBUsername
        DBPassword: !Ref DBPassword
        CFPrivateSubnet1ID: !Ref CFPrivateSubnet1
        CFPrivateSubnet2ID: !Ref CFPrivateSubnet2
        SSHSecurityGroupID: !GetAtt CFSecurityGroupNestedStack.Outputs.SSHSecurityGroupID
        DBSecurityGroupID: !GetAtt CFSecurityGroupNestedStack.Outputs.DBSecurityGroupID
